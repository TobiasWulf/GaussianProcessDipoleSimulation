%% NXP KMZ60 Characterization
% NXP KMZ60 characterization as second base of the sensor array simulation was
% although done before and was manually modified to same structure as TDK
% dataset. With additional values for bridge gain TDK dataset is adjusted in
% the same way now. The raw dataset was acquired according to the method Thorben
% Schüthe described in his IEEE paper for two-dimensional characterization of
% TMR angular sensors. The sensor characterized for both bridges a cosine and
% sine bridge. The bridges have a phisically phase shift of 90° so the sensor
% is able to reference a superimposed magnetic field in x- and y-direction.
% The field was generated by a cross coil setup.
%
% *The resulting AMR characterization field abstracts a full rotation for
% cosine and sine output voltages by representing two maximum and minimun areas
% in the characterization fields. So circular path on the charcterization fields
% generates two sinoid periods related to current angle position between 0° and
% 180° or 180° and 360°.*
%
%
%% See Also
% * <https://ieeexplore.ieee.org/document/8706125 IEEE Document 8706125>
%
%
%% Magnetic Stimulus
% The right stimulus is the keynote for characterization records. It needs to
% have the ability record slow enough for quasi static recordings but is not
% allowed to be real static so the magnetic field is not interrupted during the
% recording. Therefore slow sinoid carrier functions with even slower amplitude
% modulation is choosen to provide a quasi static stimulus. 
%
% The carrier function for the Hx-field stimulus is related to the cosine
% bridge and so:
%
% $$c_1(t) = cos(\phi(t))$$
%
% Due to the physically phase shift the Hy-field stimulus is related to sine:
%
% $$c_2(t) = sin(\phi(t))$$
%
% Both carrier runs with same carrier frequency:
%
% $$f_c = 3.2 Hz$$
%
% so they are executed with the phase vector over time:
%
% $$\phi(t) = 2\pi f_c t$$
%
% The carrier functions are triangle modulated to generate rising and falling
% amplituded. The modulation frequency is  set to:
%
% $$f_m = 0.01Hz$$
%
% Which generates a stimulus with 320 periods where 160 periods feeds a rising
% and falling record each multiplied with maximum fieldstrength amplitude:
%
% $$m(t) = H_{max} \cdot tri(t) = H_{max} \cdot tri(2(t-t_0)f_m)$$
%
% $$t_0 = \frac{1}{2f_m}$$
% 
% So the Hx- and Hy-field stimulus is described by:
%
% $$H_x(t) = m(t) \cdot c_1(t)$$
%
% $$H_y(t) = m(t) \cdot c_1(t)$$
%
% The stimulus amplitude depending on the phase in polar coordinates can be
% displayed for both parts by:
%
% $$H_{x,y}(\phi) = |H_{x,y}(\phi)| \cdot e^{j\phi} = m(t) \cdot e^{j\phi(t)}$$
%
% Where a rising spiral runs from center outwards for:
%
% $$0 < t < t_0$$
%
% And a falling spiral of amplitudes from outwards to center for:
%
% $$t_0 < t < \frac{1}{f_m}$$
%
%
%% Cosinuns Bridge Output
% The record characterization raw data are one dimensional time discrete
% vecotrs. To fieldstrength images like down below the recorded data must
% be referenced backwords to driven stimulus of Hx- and Hy-direction. But
% at first the image size of must be determined. Here fix size is set to
% 256 pixel for each direction. So it spans a vector for Hx- and Hy-direction
% from minimum -25 kA/m to maximum 25 kA/m in 256 steps with a resolution of
% 0.1961 kA/m. So it results into a 256x256 image. Now it runs for each
% point on the Hx- and Hy-axes and get the record index of the stimulus as
% backreference to the recorded bridge signal and sets the pixel. 
% That runs for the rising modulation amplitude and falling amplitude until
% every pixel is hit and ended up into a dimensional function image as:
%
% $$V_{cos}(H_x, H_y) = [mV/V]$$
% 
% The information of the image is build up in row. Reference Hx for
% constant Hy in each row. The method is also comparable to a
% histogram of Hx matches in the recorded sensor signal for one constant
% Hy and so on next histogram append on the next row for the next Hy.
%
%
%% Sine Bridge Output
% The sine characterization field is built up similar to the cosine
% images but the information lays now in the columns so the data is
% collected in each column for a constant Hx and variable Hy:
%
% $$V_{sin}(H_x, H_y) = [mV/V]$$
%
%
%% Operating Point
% To determine an operating point in sensor array simulation the
% characterization fields needs some further investigations in static Hy and
% variable Hx field strength for cosine bridge and vice versa for sine bridge
% references. In compare to the TDK TMR the NXP AMR sensor has clear linear
% plateau. It has a continuous non-linear areas divided in two maximum and minum
% areas. The best results for bridge outputs is supported by an operating point
% in saturation of the characterization fields so circular path on the fields
% should be described at 20 kA/m to 25 kA/m path radius.
%
%
%% Dataset Structure
% *Info:*
%
% The dataset is separated in two main structs. The first one is filled with
% meta data. So it represents the file header. The struct is called Info
% and contains information about how the dataset is acquired. So the
% stimulus is reconstructable from that meta data.
%
% * Created - string, contains dataset creation date
% * Creator - string, contains dataset creator
% * Edited - string, contains last time edited date
% * Editor - string, contains last time editor
% * Senor - string, sensor identification name e.g. TAS2141
% * SensorType - string, kind of sensor e.g. Angular
% * SensorTechnology - string, bridge technology e.g. AMR, GMR, TMR
% * SensorManufacturer - string, producer or supplier e.g. NXP, TDK
% * *MagneticField* - struct, contains further information about Hx and Hy
% * *SensorOutput* - struct, contains information about sensor produced
%   output and gathered image information
% * *Units* - struct, contains information about used si units in dataset
%
% * *MagneticField:*
%
% * Modulation - string, contains modulation equivalent Matlab function
% * ModulationFrequency - double, contains frequeny of modulation in Hz
% * CarrierFrequency - double, carrier frequency for both Hx and Hy carrier
%   in Hz
% * MaxAmplitude - double, maximum Hx and Hy field amplitude in kA/m
% * MinAmplitude - double, minimum Hx and Hy field amplitude in kA/m
% * Steps - double, Hx- and Hy-field steps to build characterization images
% * Resolution - double, resolution of one step in kA/m
% * CarrierHx - string, contains Hx carrier equivalent Matlab function
% * CarrierHy - string, contains Hy carrier equivalent Matlab function
%
% * *SensorOutput:*
%
% * *CosinusBridge* - struct, contains further information about sensor
%   cosine bridge outpus
% * *SinusBridge* - struct, contains further information about sensor sine
%   bridge outputs
% * BridgeGain - double, scalar factor of bridge gain for output voltage
%
% * *CosinusBridge/ SinusBridge:*
%
% * xDimension - double, image size in x-direction
% * yDimension - double, image size in y-direction
% * xDirection - string, x-axis label
% * yDirection - string, y-axis label
% * Orientation - string, orientation of varying data, row or column
% * Determination - cell, images in data {"Rise", "Fall", "All", "Diff"}
%
% * *Units:*
%
% * MagneticFieldStrength - string, kA/m
% * Frequency - string, Hz
% * SensorOutputVoltage - string, mV/V
%
% *Data:*
%
% The second struct contains the preprocessed characteriazation data of the TDK
% TAS2141 TMR angular Sensor. It is divided into two main structs one for the
% magnetic field reference points of the characterization images and one for the
% characteriazation sensor output images.
%
% * *MagneticField* - struct, contain Hx- and Hy-field vectors which are the
%   resolution references to each pixel in the characterization images of the
%   sensors preprocessed bridge outputs
% * *SensorOutput* - struct, contains structs for cosine and sine bridge
%   outputs preprocessed in images of size of 256x256 pixel where each pixel
%   references a bridge output in mV to a certain Hx- and Hy-fieldstrength
%   amplitdue
%
% * *MagneticField:*
%
% * hx - array, Hx field axis of characteriazation images column vector of 1x256
%   double values from -25 kA/m to 25 kA/m with a resolution of 0.1961 kA/m
% * hy - array, Hy field axis of characteriazation images column vector of 1x256
%   double values from -25 kA/m to 25 kA/m with a resolution of 0.1961 kA/m
%
% * *SensorOutput:*
%
% * *CosinusBridge* - struct, contains preprocessed characterization results of
%   the sensors cosine bridge outputs
% * *SinusBridge* - struct, contains preprocessed characterization results of
%   the sensors sine bridge outputs
%
% * *CosinusBridge:*
%
% * Rise - array, double array of size 256x256 which references the cosine
%   bridge outputs for rising modulated stimulus amplitude to each cross
%   reference of vectors MagneticField.hx and MagneticField.hy
% * Fall - array, double array of size 256x256 which references the cosine
%   bridge outputs for falling modulated stimulus amplitude to each cross
%   reference of vectors MagneticField.hx and MagneticField.hy
% * All - array, double array of size 256x256 superimposed image of Rise and
%   Fall
% * Diff - array, double array of size 256x256 differentiated image of Rise and
%   Fall
%
% * *SinusBridge:*
%
% * Rise - array, double array of size 256x256 which references the sine
%   bridge outputs for rising modulated stimulus amplitude to each cross
%   reference of vectors MagneticField.hx and MagneticField.hy
% * Fall - array, double array of size 256x256 which references the sine
%   bridge outputs for falling modulated stimulus amplitude to each cross
%   reference of vectors MagneticField.hx and MagneticField.hy
% * All - array, double array of size 256x256 superimposed image of Rise and
%   Fall
% * Diff - array, double array of size 256x256 differentiated image of Rise and
%   Fall
%
% The edited raw dataset provided from Thorben Schüthe is save with Matlabs
% build-in save function in a certain way to perform partial loads from the
% dataset.
%
%   save('data/NXP_KMZ60_Characterization_2020-12-03_16-53-16-721.mat', ...
%        'Info', 'Data', '-v7.3', '-nocompression')
%
%
% Created on December 05. 2020 Tobias Wulf. Copyright Tobias Wulf 2020.
%
% <html>
% <!--
% Hidden Clutter.
% Edited on Month DD. YYYY by Editor: Single line description.
% -->
% </html>
